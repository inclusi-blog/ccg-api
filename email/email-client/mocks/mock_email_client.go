// Code generated by MockGen. DO NOT EDIT.
// Source: email/email-client/email_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	email_client_request "ccg-api/email/email-client/email_client_request"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockEmailClient is a mock of EmailClient interface
type MockEmailClient struct {
	ctrl     *gomock.Controller
	recorder *MockEmailClientMockRecorder
}

// MockEmailClientMockRecorder is the mock recorder for MockEmailClient
type MockEmailClientMockRecorder struct {
	mock *MockEmailClient
}

// NewMockEmailClient creates a new mock instance
func NewMockEmailClient(ctrl *gomock.Controller) *MockEmailClient {
	mock := &MockEmailClient{ctrl: ctrl}
	mock.recorder = &MockEmailClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailClient) EXPECT() *MockEmailClientMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmailClient) Send(ctx *gin.Context, emailRequest *email_client_request.EmailClientRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, emailRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEmailClientMockRecorder) Send(ctx, emailRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailClient)(nil).Send), ctx, emailRequest)
}
