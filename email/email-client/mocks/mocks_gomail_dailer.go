// Code generated by MockGen. DO NOT EDIT.
// Source: email/email-client/gomail_dailer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	gomail_v2 "gopkg.in/gomail.v2"
	reflect "reflect"
)

// MockGomailDialer is a mock of GomailDialer interface
type MockGomailDialer struct {
	ctrl     *gomock.Controller
	recorder *MockGomailDialerMockRecorder
}

// MockGomailDialerMockRecorder is the mock recorder for MockGomailDialer
type MockGomailDialerMockRecorder struct {
	mock *MockGomailDialer
}

// NewMockGomailDialer creates a new mock instance
func NewMockGomailDialer(ctrl *gomock.Controller) *MockGomailDialer {
	mock := &MockGomailDialer{ctrl: ctrl}
	mock.recorder = &MockGomailDialerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGomailDialer) EXPECT() *MockGomailDialerMockRecorder {
	return m.recorder
}

// DialAndSend mocks base method
func (m *MockGomailDialer) DialAndSend(messages ...*gomail_v2.Message) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range messages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DialAndSend", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DialAndSend indicates an expected call of DialAndSend
func (mr *MockGomailDialerMockRecorder) DialAndSend(messages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DialAndSend", reflect.TypeOf((*MockGomailDialer)(nil).DialAndSend), messages...)
}
