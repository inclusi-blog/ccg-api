// Code generated by MockGen. DO NOT EDIT.
// Source: email/service/email_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "ccg-api/email/models"
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	golaerror "github.com/inclusi-blog/gola-utils/golaerror"
	reflect "reflect"
)

// MockEmailService is a mock of EmailService interface
type MockEmailService struct {
	ctrl     *gomock.Controller
	recorder *MockEmailServiceMockRecorder
}

// MockEmailServiceMockRecorder is the mock recorder for MockEmailService
type MockEmailServiceMockRecorder struct {
	mock *MockEmailService
}

// NewMockEmailService creates a new mock instance
func NewMockEmailService(ctrl *gomock.Controller) *MockEmailService {
	mock := &MockEmailService{ctrl: ctrl}
	mock.recorder = &MockEmailServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmailService) EXPECT() *MockEmailServiceMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockEmailService) Send(ctx *gin.Context, email models.Email) *golaerror.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, email)
	ret0, _ := ret[0].(*golaerror.Error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockEmailServiceMockRecorder) Send(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEmailService)(nil).Send), ctx, email)
}
